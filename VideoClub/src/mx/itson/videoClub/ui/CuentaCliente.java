/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mx.itson.videoClub.ui;

import static java.awt.Frame.NORMAL;
import java.io.File;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.text.DateFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.Locale;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;
import mx.itson.videoClub.entidades.Compra;
import mx.itson.videoClub.entidades.Cuenta;
import mx.itson.videoClub.enumeradores.Entrega;
import mx.itson.videoClub.enumeradores.Tipo;

/**
 * La clase usa un JFrame donde se realiza la interfaz que utilizamos para
 * obtener los datos del archivo Json utilizando un boton, usando JFile Chooser
 * es posible seleccionar un archivo en este desipositivo donde conseguir los
 * datos datos y reflejarlos en sus tablas correspondientes.
 *
 * @author Enrique Gonzalez Leyva
 */
public class CuentaCliente extends javax.swing.JFrame {

    /**
     * Creates new form CuentaCliente
     */
    public CuentaCliente() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        tblResumen = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblDetalle = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCliente = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblId = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        lblFinal = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblResumen.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {""},
                {null},
                {null}
            },
            new String [] {
                "RESUMEN DE LA CUENTA"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblResumen);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(89, 170, 630, 80));

        jLabel11.setText("Compras");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 196, 54, -1));

        jLabel4.setText("DETALLES DE LAS COMPRAS");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 280, -1, -1));

        jLabel12.setText("Total pagado");
        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 231, -1, -1));

        tblDetalle.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "FECHA", "DESCRIPCIÃ“N", "COMPRA", "RENTA", "ENTREGA", "SUBTOTAL"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tblDetalle);

        getContentPane().add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 340, 950, 170));

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel7.setText("CUENTA");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(322, 108, -1, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel3.setText("CUENTA");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(368, 11, -1, -1));

        tblCliente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null}
            },
            new String [] {
                "Jose Carrillo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblCliente);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 65, 222, 60));

        tblId.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {""},
                {""}
            },
            new String [] {
                "Data"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblId);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(368, 58, 343, 60));

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel9.setText("MONEDA");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(319, 89, -1, -1));

        jLabel6.setText("Rentas");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 216, -1, -1));

        jButton1.setText("Calcular");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 17, -1, -1));
        getContentPane().add(lblFinal, new org.netbeans.lib.awtextra.AbsoluteConstraints(825, 568, -1, -1));

        jLabel1.setText("SUBTOTAL");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 570, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Uso de Try{ }catcht{} para saber si hay algun fallo al utilizar JFile Chooser, JFile Chooser esta localizado en el directorio "user.home".
        try {
            JFileChooser filechooser = new JFileChooser();
            filechooser.setCurrentDirectory(new File(System.getProperty("user.home")));
            if (filechooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                File archivo = filechooser.getSelectedFile();

                /**
                 * archivoByte[] permire leer los archivos UTF_8.
                 */
                byte archivoByte[] = Files.readAllBytes(archivo.toPath());

                String contenido = new String(archivoByte, StandardCharsets.UTF_8);

                /**
                 * Se llama la clase EstadoCuenta para deserealizar los datos
                 * del Json.
                 */
                Cuenta cuenta = new Cuenta().deserializar(contenido);

                Compra compras = new Compra();

                /**
                 * DateFormat se utiliza para otorgarle un formato a la fecha
                 * ingresada. Locale se utiliza para otorgar formato a la
                 * cantidad de dinero ingresada.
                 */
                DateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
                Locale local = new Locale("es", "MX");
                NumberFormat formatMoneda = NumberFormat.getCurrencyInstance(local);

                /**
                 * DefaultTableModel se utiliza para llamar el modelo de una
                 * tabla y la tabla a la que se refiere. setRowCount permite
                 * limitar lineas sobrantes en una tabla.
                 */
                DefaultTableModel modeloCliente = (DefaultTableModel) tblCliente.getModel();
                modeloCliente.setRowCount(0);

                DefaultTableModel modeloCuenta = (DefaultTableModel) tblId.getModel();
                modeloCuenta.setRowCount(0);

                DefaultTableModel modeloDetalle = (DefaultTableModel) tblDetalle.getModel();
                modeloDetalle.setRowCount(0);

                DefaultTableModel modeloResumen = (DefaultTableModel) tblResumen.getModel();
                modeloResumen.setRowCount(0);

                /**
                 * modeloCliente.addRow permite aÃ±adir los datos del Cliente a
                 * su tabla correspondiente.
                 */
                modeloCliente.addRow(new Object[]{cuenta.getCliente().getCiudad()});
                modeloCliente.addRow(new Object[]{cuenta.getCliente().getCp()});

                /**
                 * modeloCuenta.addRow permite aÃ±adir los datos de la cuenta
                 * contable a su tabla correspondiente.
                 */
                modeloCuenta.addRow(new Object[]{cuenta.getId()});
                modeloCuenta.addRow(new Object[]{cuenta.getMoneda()});

                // El metodo siguiente permite organizar datos a traves de una comparacion, en este caso se ordenan las fechas de menor a mayor.
                cuenta.getCompras().sort((mov1, mov2) -> mov1.getFecha().compareTo(mov2.getFecha()));
                /**
                 * Con el uso de un for se declara la clase Compra y se
                 * aÃ±ade una condicion para determinar si el tipo es compra o
                 * renta. El total de compras y rentas se suma para obtener
                 * el total del dinero invertido en la cuenta.
                 */
                
                /**
                 * En modeloResumen.addRow se aÃ±aden los datos del resumen en su
                 * tabla correspondiente.
                 */
                modeloResumen.addRow(new Object[]{formatMoneda.format(cuenta.compras(cuenta.getCompras()))});
                modeloResumen.addRow(new Object[]{formatMoneda.format(cuenta.rentas(cuenta.getCompras()))});
                modeloResumen.addRow(new Object[]{formatMoneda.format(cuenta.suma(NORMAL) + cuenta.compras(cuenta.getCompras()) + cuenta.rentas(cuenta.getCompras()))});

                //Se convierte un valor de tipo double a tipo String para imprimir en un label.
                String sub = String.valueOf(formatMoneda.format(cuenta.suma(HEIGHT) + cuenta.compras(cuenta.getCompras()) + cuenta.rentas(cuenta.getCompras())));

                lblFinal.setText(sub);
                Cuenta cu = new Cuenta();
                
                for (Compra c : cuenta.getCompras()) {
                    if (c.getTipo() == Tipo.COMPRA) {
                        double subCompras = 0;
                        double subRentas = 0;
                        double subTotal = 0;
                        subCompras += c.getCantidad();
                        subTotal = subCompras;

                        modeloDetalle.addRow(new Object[]{formato.format(c.getFecha()), c.getDescripcion(), formatMoneda.format(c.getCantidad()), "", c.getEntrega(), formatMoneda.format(subTotal)});
                    } else if (c.getTipo() == Tipo.RENTA) {
                        double subCompras = 0;
                        double subRentas = 0;
                        double subTotal = 0;
                        if(c.getEntrega() == Entrega.RETRASO){
                            subRentas = (c.getCantidad() * 0.10);
                            subRentas += c.getCantidad();
                        subTotal = subRentas;

                        modeloDetalle.addRow(new Object[]{formato.format(c.getFecha()), c.getDescripcion(), "", formatMoneda.format(c.getCantidad()), c.getEntrega(), formatMoneda.format(subTotal)});
                        }
                    }

                }

            }

        } catch (Exception ex) {
            System.err.println("Ocurrio un error " + ex.getMessage());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CuentaCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CuentaCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CuentaCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CuentaCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CuentaCliente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblFinal;
    private javax.swing.JTable tblCliente;
    private javax.swing.JTable tblDetalle;
    private javax.swing.JTable tblId;
    private javax.swing.JTable tblResumen;
    // End of variables declaration//GEN-END:variables
}
